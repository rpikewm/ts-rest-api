openapi: 3.0.0
info:
  title: Taskstream REST API
  version: '1.0'
  contact:
    name: Robert Pike
    url: 'https://tsrest.taskstream.com'
    email: rpike@watermarkinsights.com
  description: Manage Subscriptions
servers:
  - url: 'http://localhost:3000'
    description: Robert Pike
paths:
  '/users/externalId/{external-id}':
    parameters:
      - schema:
          type: string
        name: external-id
        in: path
        required: true
    get:
      summary: User By External Id
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: get-users-externalId-id
      description: Gets a user based on External ID(This may be BannerID or whatever SIS)
    post:
      summary: Update User
      operationId: post-users-externalId-external_id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Updates User
      security:
        - auth0key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      tags:
        - Users
    delete:
      summary: Deactivate User
      operationId: delete-users-externalId-external_id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - auth0key: []
      tags:
        - Users
      description: Deactivate a user
  '/users/externalId/{external-id}/demographics':
    parameters:
      - schema:
          type: string
        name: external-id
        in: path
        required: true
    get:
      summary: User Demographics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demographics'
      operationId: get-users-externalId-id-demographics
      description: Gets users demographics for specified user
      parameters: []
      security:
        - auth0key: []
      tags:
        - Demographics
    post:
      summary: ''
      operationId: post-users-externalId-external_id-demographics
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: This is an idempotent operation and will replace what is there.
      security:
        - auth0key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Demographics'
        description: Key Value Pairs Demographic/Value
      tags:
        - Demographics
  /users:
    get:
      summary: Users
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: get-users
      description: Get all users
    put:
      summary: Create User
      operationId: put-users
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Create New User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      tags:
        - Users
  '/users/externalId/{external-id}/enrollments':
    parameters:
      - schema:
          type: string
        name: external-id
        in: path
        required: true
    get:
      summary: User Enrollments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-external_id-external_id
      description: Gets User Enrollments
      tags:
        - Enrollments
    put:
      summary: Update User Enrollment
      operationId: put-users-externalId-external_id-enrollments
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
        description: ''
      description: Adds enrollment(s)
      tags:
        - Users
    delete:
      summary: Remove Enrollment
      operationId: delete-users-externalId-external_id-enrollments
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Removes user Enrollments
      tags:
        - Enrollments
  '/users/externalId/{external-id}/subscription':
    get:
      summary: Get User Subscription
      tags:
        - Users
        - Subscriptions
        - Institutions
      responses:
        '200':
          description: Returns the keycode for the object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentSubscription'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: You need to authorize.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Account forbidden from performing this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Indicates no subscription found for the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-externalId-external-id-subscription
      description: Returns active Key Code for the user
    delete:
      summary: Remove Subscription
      operationId: delete-users-externalId-external-id-subscription
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Deletes a subscription associated with the end user.
      tags:
        - Subscriptions
        - Users
        - Institutions
    post:
      summary: Activate/Add Subscription
      operationId: post-users-externalId-external-id-subscription
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentSubscription'
        description: Keycode to associate with End User
      description: Associates a keycode with an End User.
      tags:
        - Users
        - Subscriptions
        - Institutions
    parameters:
      - schema:
          type: string
        name: external-id
        in: path
        required: true
  /institution/subscriptions:
    get:
      summary: Your GET endpoint
      tags:
        - Institutions
        - Subscriptions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeycodeUsage'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: get-institution-subscriptions
      description: Lists all keycodes
  /institution/subscriptions/keycode:
    get:
      summary: Your GET endpoint
      tags:
        - Institutions
        - Subscriptions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeyCode'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: get-institution-subscriptions-keycode
      description: ''
components:
  schemas:
    User:
      title: User
      type: object
      description: User Model
      properties:
        external_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        enrollment:
          $ref: '#/components/schemas/Enrollment'
        demographics:
          $ref: '#/components/schemas/Demographics'
      required:
        - external_id
        - first_name
        - last_name
        - email
    Demographics:
      type: object
      title: Demographic
      description: 'Key Value Pairs of Demographic, Value'
    Enrollment:
      title: Enrollment
      type: array
      description: Pass in the Course Id as pulled in from the LMS
      items:
        type: string
    Error:
      title: Error
      type: object
      description: Represents a result either success or failure. id=1
      x-examples:
        example-1:
          id: 0
          message: string
          success: true
          '': string
      properties:
        message:
          type: string
        status:
          type: integer
        '':
          type: string
      required:
        - message
    KeyCode:
      title: KeyCode
      type: object
      properties:
        keycode:
          type: string
        expiration:
          type: string
          format: date
      required:
        - keycode
      description: 'Represents a key code attached to a user. The Keycode is the only thing that can be changed, '
    KeycodeUsage:
      title: KeycodeUsage
      type: object
      properties:
        keycode:
          type: string
        expires:
          type: string
        isactive:
          type: boolean
        usagecount:
          type: integer
        totalcount:
          type: number
    StudentSubscription:
      title: KeyCodeActive
      type: object
      properties:
        studentid:
          type: string
        expiration:
          type: string
          format: date-time
        keycode:
          type: string
  securitySchemes:
    auth0key:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes: {}
tags:
  - name: Users
  - name: Enrollments
  - name: Demographics
  - name: institution
  - name: subscription
  - name: Subscriptions
  - name: Institutions
security:
  - auth0key: []
